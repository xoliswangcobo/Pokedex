///
/// @Generated by Mockolo
///



import Foundation
import UIKit
@testable import Pokedex

class ImageCacheMock: ImageCache {
    init() { }


    private(set) var getImageCallCount = 0
    var getImageHandler: ((String) -> (UIImage?))?
    func getImage(forKey key: String) -> UIImage? {
        getImageCallCount += 1
        if let getImageHandler = getImageHandler {
            return getImageHandler(key)
        }
        return nil
    }

    private(set) var setImageCallCount = 0
    var setImageHandler: ((UIImage, String) -> ())?
    func setImage(_ image: UIImage, forKey key: String)  {
        setImageCallCount += 1
        if let setImageHandler = setImageHandler {
            setImageHandler(image, key)
        }
        
    }
}

class DataCacheMock: DataCache {
    init() { }


    private(set) var getDataCallCount = 0
    var getDataHandler: ((String) -> (Data?))?
    func getData(forKey key: String) -> Data? {
        getDataCallCount += 1
        if let getDataHandler = getDataHandler {
            return getDataHandler(key)
        }
        return nil
    }

    private(set) var setDataCallCount = 0
    var setDataHandler: ((Data, String) -> ())?
    func setData(_ data: Data, forKey key: String)  {
        setDataCallCount += 1
        if let setDataHandler = setDataHandler {
            setDataHandler(data, key)
        }
        
    }
}

class PokeAPIClientMock: PokeAPIClient {
    init() { }


    private(set) var requestCallCount = 0
    var requestHandler: ((URLRequest) async throws -> (Data))?
    func request(_ request: URLRequest) async throws -> Data {
        requestCallCount += 1
        if let requestHandler = requestHandler {
            return try await requestHandler(request)
        }
        fatalError("requestHandler returns can't have a default value thus its handler must be set")
    }

    private(set) var requestPokeAPIRequestCallCount = 0
    var requestPokeAPIRequestHandler: ((PokeAPIRequest) async throws -> (Data))?
    func request(_ request: PokeAPIRequest) async throws -> Data {
        requestPokeAPIRequestCallCount += 1
        if let requestPokeAPIRequestHandler = requestPokeAPIRequestHandler {
            return try await requestPokeAPIRequestHandler(request)
        }
        fatalError("requestPokeAPIRequestHandler returns can't have a default value thus its handler must be set")
    }

    private(set) var requestTDecodableCallCount = 0
    var requestTDecodableHandler: ((PokeAPIRequest) async throws -> (Any))?
    func request<T: Decodable>(_ request: PokeAPIRequest) async throws -> T {
        requestTDecodableCallCount += 1
        if let requestTDecodableHandler = requestTDecodableHandler {
            return try await requestTDecodableHandler(request) as! T
        }
        fatalError("requestTDecodableHandler returns can't have a default value thus its handler must be set")
    }
}

class PokeAPIRequestMock: PokeAPIRequest {
    init() { }
    init(httpMethod: HTTPMethod, path: String = "", urlParameters: [String: String] = [String: String](), bodyParameters: [String: Any] = [String: Any](), httpHeaders: [String: String] = [String: String]()) {
        self._httpMethod = httpMethod
        self.path = path
        self.urlParameters = urlParameters
        self.bodyParameters = bodyParameters
        self.httpHeaders = httpHeaders
    }


    private(set) var httpMethodSetCallCount = 0
    private var _httpMethod: HTTPMethod!  { didSet { httpMethodSetCallCount += 1 } }
    var httpMethod: HTTPMethod {
        get { return _httpMethod }
        set { _httpMethod = newValue }
    }

    private(set) var pathSetCallCount = 0
    var path: String = "" { didSet { pathSetCallCount += 1 } }

    private(set) var urlParametersSetCallCount = 0
    var urlParameters: [String: String] = [String: String]() { didSet { urlParametersSetCallCount += 1 } }

    private(set) var bodyParametersSetCallCount = 0
    var bodyParameters: [String: Any] = [String: Any]() { didSet { bodyParametersSetCallCount += 1 } }

    private(set) var httpHeadersSetCallCount = 0
    var httpHeaders: [String: String] = [String: String]() { didSet { httpHeadersSetCallCount += 1 } }
}

class PokeAPIServiceMock: PokeAPIService {
    init() { }


    private(set) var getPokemonsCallCount = 0
    var getPokemonsHandler: ((Int, Int) async throws -> ([Pokemon]))?
    func getPokemons(limit: Int, offset: Int) async throws -> [Pokemon] {
        getPokemonsCallCount += 1
        if let getPokemonsHandler = getPokemonsHandler {
            return try await getPokemonsHandler(limit, offset)
        }
        return [Pokemon]()
    }

    private(set) var getPokemonDetailsCallCount = 0
    var getPokemonDetailsHandler: ((Pokemon) async throws -> (PokemonDetail))?
    func getPokemonDetails(pokemon: Pokemon) async throws -> PokemonDetail {
        getPokemonDetailsCallCount += 1
        if let getPokemonDetailsHandler = getPokemonDetailsHandler {
            return try await getPokemonDetailsHandler(pokemon)
        }
        fatalError("getPokemonDetailsHandler returns can't have a default value thus its handler must be set")
    }

    private(set) var getPokemonDataCallCount = 0
    var getPokemonDataHandler: ((String) async throws -> (Data))?
    func getPokemonData(url: String) async throws -> Data {
        getPokemonDataCallCount += 1
        if let getPokemonDataHandler = getPokemonDataHandler {
            return try await getPokemonDataHandler(url)
        }
        fatalError("getPokemonDataHandler returns can't have a default value thus its handler must be set")
    }
}

